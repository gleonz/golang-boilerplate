// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Usuario usuario
//
// swagger:model Usuario
type Usuario struct {

	// ciudad
	// Required: true
	Ciudad *string `json:"ciudad"`

	// estado
	// Required: true
	Estado *string `json:"estado"`

	// nombre completo
	// Required: true
	NombreCompleto *string `json:"nombreCompleto"`

	// numero telefonico
	// Required: true
	NumeroTelefonico *string `json:"numeroTelefonico"`
}

// Validate validates this usuario
func (m *Usuario) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCiudad(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstado(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNombreCompleto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumeroTelefonico(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Usuario) validateCiudad(formats strfmt.Registry) error {

	if err := validate.Required("ciudad", "body", m.Ciudad); err != nil {
		return err
	}

	return nil
}

func (m *Usuario) validateEstado(formats strfmt.Registry) error {

	if err := validate.Required("estado", "body", m.Estado); err != nil {
		return err
	}

	return nil
}

func (m *Usuario) validateNombreCompleto(formats strfmt.Registry) error {

	if err := validate.Required("nombreCompleto", "body", m.NombreCompleto); err != nil {
		return err
	}

	return nil
}

func (m *Usuario) validateNumeroTelefonico(formats strfmt.Registry) error {

	if err := validate.Required("numeroTelefonico", "body", m.NumeroTelefonico); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Usuario) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Usuario) UnmarshalBinary(b []byte) error {
	var res Usuario
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
