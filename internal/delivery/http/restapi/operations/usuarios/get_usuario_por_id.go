// Code generated by go-swagger; DO NOT EDIT.

package usuarios

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUsuarioPorIDHandlerFunc turns a function with the right signature into a get usuario por Id handler
type GetUsuarioPorIDHandlerFunc func(GetUsuarioPorIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUsuarioPorIDHandlerFunc) Handle(params GetUsuarioPorIDParams) middleware.Responder {
	return fn(params)
}

// GetUsuarioPorIDHandler interface for that can handle valid get usuario por Id params
type GetUsuarioPorIDHandler interface {
	Handle(GetUsuarioPorIDParams) middleware.Responder
}

// NewGetUsuarioPorID creates a new http.Handler for the get usuario por Id operation
func NewGetUsuarioPorID(ctx *middleware.Context, handler GetUsuarioPorIDHandler) *GetUsuarioPorID {
	return &GetUsuarioPorID{Context: ctx, Handler: handler}
}

/*
GetUsuarioPorID swagger:route GET /usuarios/{id} usuarios getUsuarioPorId

# Obtiene un usuario por su ID

Retorna un solo usuario
*/
type GetUsuarioPorID struct {
	Context *middleware.Context
	Handler GetUsuarioPorIDHandler
}

func (o *GetUsuarioPorID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUsuarioPorIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
